# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/anglesMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class anglesMsg(genpy.Message):
  _md5sum = "6b8e0d4ccdce3065f67c69afb3a3bac4"
  _type = "beginner_tutorials/anglesMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 first
float64 second
float64 base
int64 servo1 
int64 servo2
int64 servo3
bool isPump"""
  __slots__ = ['first','second','base','servo1','servo2','servo3','isPump']
  _slot_types = ['float64','float64','float64','int64','int64','int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       first,second,base,servo1,servo2,servo3,isPump

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(anglesMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.first is None:
        self.first = 0.
      if self.second is None:
        self.second = 0.
      if self.base is None:
        self.base = 0.
      if self.servo1 is None:
        self.servo1 = 0
      if self.servo2 is None:
        self.servo2 = 0
      if self.servo3 is None:
        self.servo3 = 0
      if self.isPump is None:
        self.isPump = False
    else:
      self.first = 0.
      self.second = 0.
      self.base = 0.
      self.servo1 = 0
      self.servo2 = 0
      self.servo3 = 0
      self.isPump = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3qB().pack(_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.servo3, _x.isPump))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.servo3, _x.isPump,) = _get_struct_3d3qB().unpack(str[start:end])
      self.isPump = bool(self.isPump)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3qB().pack(_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.servo3, _x.isPump))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.servo3, _x.isPump,) = _get_struct_3d3qB().unpack(str[start:end])
      self.isPump = bool(self.isPump)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3qB = None
def _get_struct_3d3qB():
    global _struct_3d3qB
    if _struct_3d3qB is None:
        _struct_3d3qB = struct.Struct("<3d3qB")
    return _struct_3d3qB
