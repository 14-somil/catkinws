# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from final_rover/armClient.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class armClient(genpy.Message):
  _md5sum = "6475c3b95c87883ceb5174259fc15e38"
  _type = "final_rover/armClient"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 y
char command
int16 position
float64 pitch
float64 yaw
int16 gripper"""
  __slots__ = ['y','command','position','pitch','yaw','gripper']
  _slot_types = ['float64','char','int16','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       y,command,position,pitch,yaw,gripper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(armClient, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.y is None:
        self.y = 0.
      if self.command is None:
        self.command = 0
      if self.position is None:
        self.position = 0
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.gripper is None:
        self.gripper = 0
    else:
      self.y = 0.
      self.command = 0
      self.position = 0
      self.pitch = 0.
      self.yaw = 0.
      self.gripper = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dBh2dh().pack(_x.y, _x.command, _x.position, _x.pitch, _x.yaw, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.y, _x.command, _x.position, _x.pitch, _x.yaw, _x.gripper,) = _get_struct_dBh2dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dBh2dh().pack(_x.y, _x.command, _x.position, _x.pitch, _x.yaw, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.y, _x.command, _x.position, _x.pitch, _x.yaw, _x.gripper,) = _get_struct_dBh2dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dBh2dh = None
def _get_struct_dBh2dh():
    global _struct_dBh2dh
    if _struct_dBh2dh is None:
        _struct_dBh2dh = struct.Struct("<dBh2dh")
    return _struct_dBh2dh
