# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/anglesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class anglesRequest(genpy.Message):
  _md5sum = "1e73dc08ff187ad0d3c12605f4fd2f23"
  _type = "beginner_tutorials/anglesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 first
int64 second
int64 base
int64 servo1
int64 servo2
bool isPump
bool isSlow
"""
  __slots__ = ['first','second','base','servo1','servo2','isPump','isSlow']
  _slot_types = ['int64','int64','int64','int64','int64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       first,second,base,servo1,servo2,isPump,isSlow

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(anglesRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.first is None:
        self.first = 0
      if self.second is None:
        self.second = 0
      if self.base is None:
        self.base = 0
      if self.servo1 is None:
        self.servo1 = 0
      if self.servo2 is None:
        self.servo2 = 0
      if self.isPump is None:
        self.isPump = False
      if self.isSlow is None:
        self.isSlow = False
    else:
      self.first = 0
      self.second = 0
      self.base = 0
      self.servo1 = 0
      self.servo2 = 0
      self.isPump = False
      self.isSlow = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5q2B().pack(_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.isPump, _x.isSlow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.isPump, _x.isSlow,) = _get_struct_5q2B().unpack(str[start:end])
      self.isPump = bool(self.isPump)
      self.isSlow = bool(self.isSlow)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5q2B().pack(_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.isPump, _x.isSlow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.first, _x.second, _x.base, _x.servo1, _x.servo2, _x.isPump, _x.isSlow,) = _get_struct_5q2B().unpack(str[start:end])
      self.isPump = bool(self.isPump)
      self.isSlow = bool(self.isSlow)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5q2B = None
def _get_struct_5q2B():
    global _struct_5q2B
    if _struct_5q2B is None:
        _struct_5q2B = struct.Struct("<5q2B")
    return _struct_5q2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/anglesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class anglesResponse(genpy.Message):
  _md5sum = "c5df00fea9d1f39520fa0345cbde1b26"
  _type = "beginner_tutorials/anglesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool check

"""
  __slots__ = ['check']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       check

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(anglesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.check is None:
        self.check = False
    else:
      self.check = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.check
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.check,) = _get_struct_B().unpack(str[start:end])
      self.check = bool(self.check)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.check
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.check,) = _get_struct_B().unpack(str[start:end])
      self.check = bool(self.check)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class angles(object):
  _type          = 'beginner_tutorials/angles'
  _md5sum = 'f9f067a5d6333bb90da23a282c5316a0'
  _request_class  = anglesRequest
  _response_class = anglesResponse
